CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
CREATE INDEX
== Enabling psql timing ==
Timing is on.
== FEATURE 1a EXPLORE HOUSING PRICES: Average price of ON condos in 2020 by region (Limit 10)==
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=62.99..63.01 rows=1 width=108) (actual time=0.383..0.389 rows=10 loops=1)
   Buffers: shared hit=182 read=11
   ->  GroupAggregate  (cost=62.99..63.01 rows=1 width=108) (actual time=0.382..0.387 rows=10 loops=1)
         Group Key: r.name
         Buffers: shared hit=182 read=11
         ->  Sort  (cost=62.99..62.99 rows=1 width=108) (actual time=0.378..0.380 rows=11 loops=1)
               Sort Key: r.name
               Sort Method: quicksort  Memory: 26kB
               Buffers: shared hit=182 read=11
               ->  Nested Loop  (cost=30.31..62.98 rows=1 width=108) (actual time=0.249..0.358 rows=24 loops=1)
                     Buffers: shared hit=182 read=11
                     ->  Hash Join  (cost=30.03..56.15 rows=1 width=100) (actual time=0.222..0.270 rows=60 loops=1)
                           Hash Cond: (p.region_id = r.region_id)
                           Buffers: shared hit=42 read=7
                           ->  Bitmap Heap Scan on property p  (cost=4.44..30.51 rows=20 width=40) (actual time=0.045..0.098 rows=298 loops=1)
                                 Recheck Cond: ((type)::text = 'Condo'::text)
                                 Heap Blocks: exact=26
                                 Buffers: shared hit=26 read=3
                                 ->  Bitmap Index Scan on idx_property_type_region  (cost=0.00..4.43 rows=20 width=0) (actual time=0.038..0.038 rows=298 loops=1)
                                       Index Cond: ((type)::text = 'Condo'::text)
                                       Buffers: shared read=3
                           ->  Hash  (cost=25.39..25.39 rows=16 width=68) (actual time=0.137..0.137 rows=353 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 26kB
                                 Buffers: shared hit=16 read=4
                                 ->  Bitmap Heap Scan on region r  (cost=4.40..25.39 rows=16 width=68) (actual time=0.035..0.083 rows=353 loops=1)
                                       Recheck Cond: ((province)::text = 'ON'::text)
                                       Heap Blocks: exact=16
                                       Buffers: shared hit=16 read=4
                                       ->  Bitmap Index Scan on idx_region_province_name  (cost=0.00..4.40 rows=16 width=0) (actual time=0.031..0.031 rows=353 loops=1)
                                             Index Cond: ((province)::text = 'ON'::text)
                                             Buffers: shared read=4
                     ->  Index Scan using idx_housing_year_property on housing_price hp  (cost=0.28..6.50 rows=1 width=16) (actual time=0.001..0.001 rows=0 loops=60)
                           Index Cond: ((year = 2020) AND (property_id = p.property_id))
                           Buffers: shared hit=140 read=4
 Planning:
   Buffers: shared hit=278 read=7
 Planning Time: 0.562 ms
 Execution Time: 0.435 ms
(38 rows)

Time: 1.794 ms
== FEATURE 1b EXPLORE INCOME DATA: Average income of ON regions in 2020 (Limit 10) ==
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41.98..42.00 rows=1 width=76) (actual time=0.299..0.312 rows=10 loops=1)
   Buffers: shared hit=22 read=2
   ->  GroupAggregate  (cost=41.98..42.00 rows=1 width=76) (actual time=0.298..0.309 rows=10 loops=1)
         Group Key: r.name
         Buffers: shared hit=22 read=2
         ->  Sort  (cost=41.98..41.98 rows=1 width=76) (actual time=0.286..0.290 rows=11 loops=1)
               Sort Key: r.name
               Sort Method: quicksort  Memory: 26kB
               Buffers: shared hit=22 read=2
               ->  Hash Join  (cost=20.94..41.97 rows=1 width=76) (actual time=0.138..0.259 rows=29 loops=1)
                     Hash Cond: (r.region_id = i.region_id)
                     Buffers: shared hit=22 read=2
                     ->  Bitmap Heap Scan on region r  (cost=4.40..25.39 rows=16 width=68) (actual time=0.037..0.130 rows=353 loops=1)
                           Recheck Cond: ((province)::text = 'ON'::text)
                           Heap Blocks: exact=16
                           Buffers: shared hit=20
                           ->  Bitmap Index Scan on idx_region_province_name  (cost=0.00..4.40 rows=16 width=0) (actual time=0.028..0.028 rows=353 loops=1)
                                 Index Cond: ((province)::text = 'ON'::text)
                                 Buffers: shared hit=4
                     ->  Hash  (cost=16.42..16.42 rows=9 width=16) (actual time=0.079..0.080 rows=102 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 14kB
                           Buffers: shared hit=2 read=2
                           ->  Bitmap Heap Scan on income_data i  (cost=4.35..16.42 rows=9 width=16) (actual time=0.038..0.048 rows=102 loops=1)
                                 Recheck Cond: (year = 2020)
                                 Heap Blocks: exact=2
                                 Buffers: shared hit=2 read=2
                                 ->  Bitmap Index Scan on idx_income_year_region  (cost=0.00..4.34 rows=9 width=0) (actual time=0.031..0.031 rows=102 loops=1)
                                       Index Cond: (year = 2020)
                                       Buffers: shared read=2
 Planning:
   Buffers: shared hit=101 read=3
 Planning Time: 0.773 ms
 Execution Time: 0.416 ms
(33 rows)

Time: 2.583 ms
FEATURE 2: Top 5 regions where $145,000 income yields HAI ≥ 25% for 2020 condos (Limit 10)
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=88.85..88.85 rows=1 width=64) (actual time=1.189..1.192 rows=10 loops=1)
   Buffers: shared hit=251 read=6
   ->  Sort  (cost=88.85..88.85 rows=1 width=64) (actual time=1.189..1.190 rows=10 loops=1)
         Sort Key: (round(((('145000'::double precision / hp.avg_price) * '100'::double precision))::numeric, 2)) DESC
         Sort Method: top-N heapsort  Memory: 26kB
         Buffers: shared hit=251 read=6
         ->  Nested Loop  (cost=35.60..88.84 rows=1 width=64) (actual time=0.194..1.174 rows=57 loops=1)
               Buffers: shared hit=248 read=6
               ->  Hash Join  (cost=35.32..83.52 rows=1 width=12) (actual time=0.186..1.083 rows=57 loops=1)
                     Hash Cond: (hp.property_id = p.property_id)
                     Buffers: shared hit=77 read=6
                     ->  Bitmap Heap Scan on housing_price hp  (cost=4.56..52.74 rows=12 width=12) (actual time=0.085..0.940 rows=892 loops=1)
                           Recheck Cond: (year = 2020)
                           Filter: (round(((('145000'::double precision / avg_price) * '100'::double precision))::numeric, 2) >= '25'::numeric)
                           Rows Removed by Filter: 378
                           Heap Blocks: exact=48
                           Buffers: shared hit=48 read=6
                           ->  Bitmap Index Scan on idx_housing_avg_price  (cost=0.00..4.56 rows=37 width=0) (actual time=0.070..0.071 rows=1270 loops=1)
                                 Index Cond: (year = 2020)
                                 Buffers: shared read=6
                     ->  Hash  (cost=30.51..30.51 rows=20 width=8) (actual time=0.091..0.092 rows=298 loops=1)
                           Buckets: 1024  Batches: 1  Memory Usage: 20kB
                           Buffers: shared hit=29
                           ->  Bitmap Heap Scan on property p  (cost=4.44..30.51 rows=20 width=8) (actual time=0.018..0.068 rows=298 loops=1)
                                 Recheck Cond: ((type)::text = 'Condo'::text)
                                 Heap Blocks: exact=26
                                 Buffers: shared hit=29
                                 ->  Bitmap Index Scan on idx_property_type_region  (cost=0.00..4.43 rows=20 width=0) (actual time=0.014..0.014 rows=298 loops=1)
                                       Index Cond: ((type)::text = 'Condo'::text)
                                       Buffers: shared hit=3
               ->  Index Scan using ix_region_region_id on region r  (cost=0.28..5.30 rows=1 width=36) (actual time=0.001..0.001 rows=1 loops=57)
                     Index Cond: (region_id = p.region_id)
                     Buffers: shared hit=171
 Planning:
   Buffers: shared hit=10
 Planning Time: 0.196 ms
 Execution Time: 1.208 ms
(37 rows)

Time: 2.249 ms
FEATURE 3: Reverse Lookup – Where Did This Price Exist? (±$25,000 around 600000) (Limit 10)
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.84..7.00 rows=10 width=76) (actual time=0.021..0.079 rows=10 loops=1)
   Buffers: shared hit=186
   ->  Nested Loop  (cost=0.84..1522.30 rows=2471 width=76) (actual time=0.021..0.077 rows=10 loops=1)
         Buffers: shared hit=186
         ->  Merge Join  (cost=0.56..708.75 rows=2471 width=48) (actual time=0.020..0.069 rows=10 loops=1)
               Merge Cond: (hp.property_id = p.property_id)
               Buffers: shared hit=156
               ->  Index Scan using ix_housing_price_property_id on housing_price hp  (cost=0.28..451.05 rows=2471 width=16) (actual time=0.008..0.033 rows=10 loops=1)
                     Filter: (abs((avg_price - '600000'::double precision)) <= '25000'::double precision)
                     Rows Removed by Filter: 199
                     Buffers: shared hit=152
               ->  Index Scan using ix_property_property_id on property p  (cost=0.28..216.73 rows=4030 width=40) (actual time=0.005..0.023 rows=226 loops=1)
                     Buffers: shared hit=4
         ->  Index Scan using ix_region_region_id on region r  (cost=0.28..0.33 rows=1 width=36) (actual time=0.001..0.001 rows=1 loops=10)
               Index Cond: (region_id = p.region_id)
               Buffers: shared hit=30
 Planning Time: 0.075 ms
 Execution Time: 0.087 ms
(18 rows)

Time: 0.376 ms
FEATURE 4: Top 5 HAI rankings for all regions in 2020 condos (Limit 10)
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59.28..59.28 rows=1 width=76) (actual time=0.384..0.386 rows=5 loops=1)
   Buffers: shared hit=426 read=1
   ->  Sort  (cost=59.28..59.28 rows=1 width=76) (actual time=0.383..0.385 rows=5 loops=1)
         Sort Key: (round((((i.avg_income / avg(h.avg_price)) * '100'::double precision))::numeric, 2)) DESC
         Sort Method: top-N heapsort  Memory: 25kB
         Buffers: shared hit=426 read=1
         ->  GroupAggregate  (cost=59.23..59.27 rows=1 width=76) (actual time=0.361..0.377 rows=19 loops=1)
               Group Key: r.region_id, i.avg_income
               Buffers: shared hit=426 read=1
               ->  Sort  (cost=59.23..59.24 rows=1 width=52) (actual time=0.351..0.354 rows=19 loops=1)
                     Sort Key: r.region_id, i.avg_income
                     Sort Method: quicksort  Memory: 26kB
                     Buffers: shared hit=426 read=1
                     ->  Nested Loop  (cost=21.53..59.22 rows=1 width=52) (actual time=0.108..0.337 rows=19 loops=1)
                           Buffers: shared hit=426 read=1
                           ->  Nested Loop  (cost=21.25..52.39 rows=1 width=52) (actual time=0.076..0.249 rows=75 loops=1)
                                 Buffers: shared hit=258
                                 ->  Hash Join  (cost=20.97..47.09 rows=1 width=24) (actual time=0.070..0.155 rows=75 loops=1)
                                       Hash Cond: (p.region_id = i.region_id)
                                       Buffers: shared hit=33
                                       ->  Bitmap Heap Scan on property p  (cost=4.44..30.51 rows=20 width=8) (actual time=0.025..0.083 rows=298 loops=1)
                                             Recheck Cond: ((type)::text = 'Condo'::text)
                                             Heap Blocks: exact=26
                                             Buffers: shared hit=29
                                             ->  Bitmap Index Scan on idx_property_type_region  (cost=0.00..4.43 rows=20 width=0) (actual time=0.018..0.018 rows=298 loops=1)
                                                   Index Cond: ((type)::text = 'Condo'::text)
                                                   Buffers: shared hit=3
                                       ->  Hash  (cost=16.42..16.42 rows=9 width=16) (actual time=0.033..0.033 rows=102 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 13kB
                                             Buffers: shared hit=4
                                             ->  Bitmap Heap Scan on income_data i  (cost=4.35..16.42 rows=9 width=16) (actual time=0.013..0.021 rows=102 loops=1)
                                                   Recheck Cond: (year = 2020)
                                                   Heap Blocks: exact=2
                                                   Buffers: shared hit=4
                                                   ->  Bitmap Index Scan on idx_income_year_region  (cost=0.00..4.34 rows=9 width=0) (actual time=0.008..0.008 rows=102 loops=1)
                                                         Index Cond: (year = 2020)
                                                         Buffers: shared hit=2
                                 ->  Index Scan using ix_region_region_id on region r  (cost=0.28..5.30 rows=1 width=36) (actual time=0.001..0.001 rows=1 loops=75)
                                       Index Cond: (region_id = p.region_id)
                                       Buffers: shared hit=225
                           ->  Index Scan using idx_housing_year_property on housing_price h  (cost=0.28..6.50 rows=1 width=16) (actual time=0.001..0.001 rows=0 loops=75)
                                 Index Cond: ((year = 2020) AND (property_id = p.property_id))
                                 Buffers: shared hit=168 read=1
 Planning:
   Buffers: shared hit=7
 Planning Time: 0.406 ms
 Execution Time: 0.422 ms
(47 rows)

Time: 1.147 ms
FEATURE 5: Data Gap Finder - Regions with housing data but no income data for 2019 condos
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Except  (cost=88.44..167.76 rows=1 width=40) (actual time=0.138..0.140 rows=0 loops=1)
   Buffers: shared hit=306
   ->  Append  (cost=88.44..167.71 rows=10 width=40) (actual time=0.021..0.131 rows=100 loops=1)
         Buffers: shared hit=306
         ->  Subquery Scan on "*SELECT* 1"  (cost=88.44..88.46 rows=1 width=40) (actual time=0.010..0.010 rows=0 loops=1)
               Buffers: shared hit=2
               ->  Unique  (cost=88.44..88.45 rows=1 width=36) (actual time=0.009..0.010 rows=0 loops=1)
                     Buffers: shared hit=2
                     ->  Sort  (cost=88.44..88.45 rows=1 width=36) (actual time=0.009..0.010 rows=0 loops=1)
                           Sort Key: r.region_id, r.name
                           Sort Method: quicksort  Memory: 25kB
                           Buffers: shared hit=2
                           ->  Nested Loop  (cost=35.60..88.43 rows=1 width=36) (actual time=0.006..0.007 rows=0 loops=1)
                                 Buffers: shared hit=2
                                 ->  Hash Join  (cost=35.32..83.13 rows=1 width=4) (actual time=0.006..0.006 rows=0 loops=1)
                                       Hash Cond: (hp.property_id = p.property_id)
                                       Buffers: shared hit=2
                                       ->  Bitmap Heap Scan on housing_price hp  (cost=4.57..52.28 rows=37 width=4) (actual time=0.006..0.006 rows=0 loops=1)
                                             Recheck Cond: (year = 2019)
                                             Buffers: shared hit=2
                                             ->  Bitmap Index Scan on idx_housing_avg_price  (cost=0.00..4.56 rows=37 width=0) (actual time=0.005..0.005 rows=0 loops=1)
                                                   Index Cond: (year = 2019)
                                                   Buffers: shared hit=2
                                       ->  Hash  (cost=30.51..30.51 rows=20 width=8) (never executed)
                                             ->  Bitmap Heap Scan on property p  (cost=4.44..30.51 rows=20 width=8) (never executed)
                                                   Recheck Cond: ((type)::text = 'Condo'::text)
                                                   ->  Bitmap Index Scan on idx_property_type_region  (cost=0.00..4.43 rows=20 width=0) (never executed)
                                                         Index Cond: ((type)::text = 'Condo'::text)
                                 ->  Index Scan using ix_region_region_id on region r  (cost=0.28..5.30 rows=1 width=36) (never executed)
                                       Index Cond: (region_id = p.region_id)
         ->  Subquery Scan on "*SELECT* 2"  (cost=4.63..79.19 rows=9 width=40) (actual time=0.011..0.112 rows=100 loops=1)
               Buffers: shared hit=304
               ->  Nested Loop  (cost=4.63..79.10 rows=9 width=36) (actual time=0.011..0.103 rows=100 loops=1)
                     Buffers: shared hit=304
                     ->  Bitmap Heap Scan on income_data i  (cost=4.35..16.42 rows=9 width=4) (actual time=0.008..0.017 rows=100 loops=1)
                           Recheck Cond: (year = 2019)
                           Heap Blocks: exact=2
                           Buffers: shared hit=4
                           ->  Bitmap Index Scan on idx_income_year_region  (cost=0.00..4.34 rows=9 width=0) (actual time=0.004..0.004 rows=100 loops=1)
                                 Index Cond: (year = 2019)
                                 Buffers: shared hit=2
                     ->  Index Scan using ix_region_region_id on region r_1  (cost=0.28..6.96 rows=1 width=36) (actual time=0.001..0.001 rows=1 loops=100)
                           Index Cond: (region_id = i.region_id)
                           Buffers: shared hit=300
 Planning Time: 0.153 ms
 Execution Time: 0.162 ms
(46 rows)

Time: 0.502 ms
Advanced Feature 1: Find region that has minimum x consecutive Income Growth (by default, x = 3) 
CREATE TABLE
Time: 1.372 ms
DO
Time: 5.452 ms
 region_id |     region_name     | max_consecutive_growth 
-----------+---------------------+------------------------
        10 | Saskatoon           |                     26
        78 | Edmonton            |                     24
       465 | Winnipeg            |                     24
      1088 | Halifax             |                     24
        15 | Vancouver           |                     24
      3066 | Toronto             |                     24
         6 | Calgary             |                     24
      3052 | Oshawa              |                     22
       419 | Victoria            |                     22
         4 | Kelowna             |                     19
      3084 | Guelph              |                     19
      3051 | Hamilton            |                     19
       440 | Regina              |                     18
      1085 | Moncton             |                     18
        22 | Nanaimo             |                     17
      1159 | Fredericton         |                     17
        59 | Canmore             |                     17
      2287 | St. John's          |                     16
      3090 | Brantford           |                     15
      2053 | Kingston            |                     14
      3055 | London              |                     14
        45 | Kamloops            |                     14
       480 | Brandon             |                     13
        11 | Campbell River      |                     13
        84 | Squamish            |                     13
        48 | Vernon              |                     13
        14 | Lethbridge          |                     11
        41 | Prince George       |                     10
      3077 | Tillsonburg         |                      9
        91 | Chilliwack          |                      9
      1029 | Centre Wellington   |                      9
      1017 | Barrie              |                      9
      2953 | Whitehorse          |                      9
        99 | Prince Albert       |                      9
       439 | Moose Jaw           |                      9
       396 | Terrace             |                      9
      3108 | Woodstock           |                      9
        79 | Cranbrook           |                      9
      3057 | Windsor             |                      8
      1036 | Collingwood         |                      8
        16 | Okotoks             |                      8
       476 | Steinbach           |                      7
      1060 | Greater Sudbury     |                      7
      1041 | Wasaga Beach        |                      7
       445 | Estevan             |                      7
        71 | Courtenay           |                      7
      2949 | Yellowknife         |                      7
        13 | Red Deer            |                      7
        44 | Salmon Arm          |                      7
      3018 | North Bay           |                      7
        51 | Penticton           |                      7
       105 | Parksville          |                      7
      2312 | Gander              |                      7
      1536 | Pembroke            |                      7
      2302 | Bay Roberts         |                      7
      1028 | Orillia             |                      7
         7 | Camrose             |                      7
        55 | Nelson              |                      7
        93 | Port Alberni        |                      7
       230 | Swift Current       |                      6
        34 | Powell River        |                      6
      2400 | Owen Sound          |                      6
       386 | Prince Rupert       |                      6
      1108 | Kentville           |                      6
        17 | Medicine Hat        |                      6
       444 | Yorkton             |                      6
      1127 | Bathurst            |                      6
       144 | Sylvan Lake         |                      5
       203 | Lacombe             |                      5
        33 | Quesnel             |                      5
      1081 | Saint John          |                      5
        82 | Dawson Creek        |                      5
      1075 | Summerside          |                      5
      1021 | Sault Ste. Marie    |                      5
        64 | Williams Lake       |                      5
      3081 | Leamington          |                      5
       471 | Weyburn             |                      5
      1191 | New Glasgow         |                      5
      3111 | Sarnia              |                      5
      1074 | Charlottetown       |                      5
       178 | High River          |                      5
      1245 | Miramichi           |                      5
      1614 | Cornwall            |                      4
      1047 | Midland             |                      4
        20 | Grande Prairie      |                      4
      2337 | Peterborough        |                      4
       101 | Brooks              |                      4
        35 | Fort St. John       |                      4
       399 | Trail               |                      4
       145 | Cold Lake           |                      4
      1128 | Truro               |                      4
       119 | North Battleford    |                      4
      1096 | Edmundston          |                      4
      1025 | Thunder Bay         |                      4
      2487 | Essa                |                      4
       207 | Strathmore          |                      4
      1026 | Elliot Lake         |                      3
      2483 | Kawartha Lakes      |                      3
       481 | Kenora              |                      3
      1478 | Grand Falls-Windsor |                      3
      1160 | Corner Brook        |                      3
       393 | Ladysmith           |                      3
       835 | Thompson            |                      3
(103 rows)

Time: 0.257 ms
